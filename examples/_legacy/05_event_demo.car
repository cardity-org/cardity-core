protocol EventDemo {
  version: "1.0.0";
  owner: "doge1event123";
  
  state {
    user_count: int = 0;
    event_count: int = 0;
    last_event_time: string = "";
    active_users: int = 0;
  }
  
  // 用户相关事件
  event UserRegistered {
    user_id: string;
    user_name: string;
    registration_time: string;
  }
  
  event UserLogin {
    user_id: string;
    login_time: string;
  }
  
  event UserLogout {
    user_id: string;
    logout_time: string;
    session_duration: int;
  }
  
  // 系统事件
  event SystemEvent {
    event_type: string;
    description: string;
    timestamp: string;
  }
  
  event ErrorOccurred {
    error_code: int;
    error_message: string;
    user_id: string;
  }
  
  // 用户管理方法
  method register_user(user_id, user_name) {
    if (user_id.length() > 0 && user_name.length() > 0) {
      state.user_count = state.user_count + 1;
      state.event_count = state.event_count + 1;
      state.last_event_time = "now";
      
      emit UserRegistered(user_id, user_name, "now");
      emit SystemEvent("user_registration", "New user registered", "now");
      
      return "User registered successfully";
    }
    return "Invalid user data";
  }
  
  method user_login(user_id) {
    if (user_id.length() > 0) {
      state.active_users = state.active_users + 1;
      state.event_count = state.event_count + 1;
      state.last_event_time = "now";
      
      emit UserLogin(user_id, "now");
      emit SystemEvent("user_login", "User logged in", "now");
      
      return "Login successful";
    }
    return "Invalid user ID";
  }
  
  method user_logout(user_id, session_duration) {
    if (user_id.length() > 0) {
      state.active_users = state.active_users - 1;
      state.event_count = state.event_count + 1;
      state.last_event_time = "now";
      
      emit UserLogout(user_id, "now", session_duration);
      emit SystemEvent("user_logout", "User logged out", "now");
      
      return "Logout successful";
    }
    return "Invalid user ID";
  }
  
  // 系统方法
  method trigger_system_event(event_type, description) {
    state.event_count = state.event_count + 1;
    state.last_event_time = "now";
    
    emit SystemEvent(event_type, description, "now");
    return "System event triggered";
  }
  
  method report_error(error_code, error_message, user_id) {
    state.event_count = state.event_count + 1;
    state.last_event_time = "now";
    
    emit ErrorOccurred(error_code, error_message, user_id);
    emit SystemEvent("error", "Error reported", "now");
    
    return "Error reported";
  }
  
  // 查询方法
  method get_user_count() {
    return state.user_count;
  }
  
  method get_event_count() {
    return state.event_count;
  }
  
  method get_active_users() {
    return state.active_users;
  }
  
  method get_last_event_time() {
    return state.last_event_time;
  }
  
  method get_stats() {
    return "Users: " + state.user_count + ", Events: " + state.event_count + ", Active: " + state.active_users;
  }
}
