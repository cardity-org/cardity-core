protocol Counter {
  version: "1.0.0";
  owner: "doge1counter123";
  
  state {
    count: int = 0;
    name: string = "Counter";
    active: bool = true;
    max_count: int = 1000;
  }
  
  event CountChanged {
    old_count: int;
    new_count: int;
    operation: string;
  }
  
  event CounterReset {
    previous_count: int;
  }
  
  method increment() {
    if (state.active && state.count < state.max_count) {
      let old_count = state.count;
      state.count = state.count + 1;
      emit CountChanged(old_count, state.count, "increment");
    }
  }
  
  method decrement() {
    if (state.active && state.count > 0) {
      let old_count = state.count;
      state.count = state.count - 1;
      emit CountChanged(old_count, state.count, "decrement");
    }
  }
  
  method get_count() {
    return state.count;
  }
  
  method set_name(new_name) {
    state.name = new_name;
  }
  
  method get_name() {
    return state.name;
  }
  
  method toggle_active() {
    state.active = !state.active;
  }
  
  method reset() {
    let previous_count = state.count;
    state.count = 0;
    emit CounterReset(previous_count);
  }
  
  method set_max_count(max) {
    if (max > 0) {
      state.max_count = max;
    }
  }
}
