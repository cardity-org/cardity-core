protocol Wallet {
  version: "1.0.0";
  owner: "doge1wallet456";
  
  state {
    balance: int = 0;
    owner_address: string = "doge1wallet456";
    is_locked: bool = false;
    transaction_count: int = 0;
    max_daily_withdrawal: int = 10000;
    daily_withdrawal_used: int = 0;
    last_reset_date: string = "";
  }
  
  event BalanceUpdated {
    old_balance: int;
    new_balance: int;
    operation: string;
  }
  
  event WalletLocked {
    locked: bool;
  }
  
  event TransactionCreated {
    amount: int;
    transaction_type: string;
  }
  
  method deposit(amount) {
    if (!state.is_locked && amount > 0) {
      let old_balance = state.balance;
      state.balance = state.balance + amount;
      state.transaction_count = state.transaction_count + 1;
      emit BalanceUpdated(old_balance, state.balance, "deposit");
      emit TransactionCreated(amount, "deposit");
    }
  }
  
  method withdraw(amount) {
    if (!state.is_locked && amount > 0) {
      if (state.balance >= amount) {
        if (state.daily_withdrawal_used + amount <= state.max_daily_withdrawal) {
          let old_balance = state.balance;
          state.balance = state.balance - amount;
          state.daily_withdrawal_used = state.daily_withdrawal_used + amount;
          state.transaction_count = state.transaction_count + 1;
          emit BalanceUpdated(old_balance, state.balance, "withdraw");
          emit TransactionCreated(amount, "withdraw");
        }
      }
    }
  }
  
  method get_balance() {
    return state.balance;
  }
  
  method get_owner() {
    return state.owner_address;
  }
  
  method lock_wallet() {
    state.is_locked = true;
    emit WalletLocked(true);
  }
  
  method unlock_wallet() {
    state.is_locked = false;
    emit WalletLocked(false);
  }
  
  method get_transaction_count() {
    return state.transaction_count;
  }
  
  method set_max_daily_withdrawal(max) {
    if (max > 0) {
      state.max_daily_withdrawal = max;
    }
  }
  
  method reset_daily_withdrawal() {
    state.daily_withdrawal_used = 0;
    state.last_reset_date = "today";
  }
}
